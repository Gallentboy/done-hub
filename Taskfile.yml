# https://taskfile.dev

version: '3'

vars:
  GOPROXY: 'https://goproxy.cn,direct'
  GOSUMDB: sum.golang.google.cn
  ROOT_DIR: $(pwd)
  BUILD_DIR: $(pwd)/_output
  BIN_DIR: $(pwd)/_output/done-hub
  VERSION_PKG: done-hub/common/config
  BUILD_VERSION: $(git describe --tags || echo "dev")
  BUILD_DATE: $(date +%Y%m%d)
  GIT_BRANCH: $(git branch -r --contains | head -1 | sed -E -e "s%(HEAD ->|origin|upstream)/?%%g" | xargs)
  GIT_COMMIT: $(git rev-parse --short HEAD || echo "abcdefgh")
  BUILD_RELEASE: "{{.BUILD_VERSION}}-{{.BUILD_DATE}}-{{.GIT_COMMIT}}"
  IMAGE: "ttl.sh/one-hub:{{.BUILD_RELEASE}}"
  LOCAL_OS: $(go version | awk '{print $NF}')
  GOOS: $(go env GOOS)
  GOARCH: $(go env GOARCH)
  LDFLAGS: "-w -s \
    -extldflags '-static' \
    -X '{{.VERSION_PKG}}.Version={{.BUILD_VERSION}}' \
    -X '{{.VERSION_PKG}}.BuildTime={{.BUILD_DATE}}' \
    -X '{{.VERSION_PKG}}.Commit={{.GIT_COMMIT}}'"

tasks:
  web:
    desc: build web
    cmds:
      - hack/scripts/genui.sh {{.BUILD_VERSION}}
    status:
      - test -f web/build/index.html

  gomod:
    desc: update go mod
    cmds:
      - go mod tidy

  gofmt:
    cmds:
      - go install golang.org/x/tools/cmd/goimports@latest
      - gofmt -s -w .
      - goimports -w .

  golint:
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - golangci-lint run -v ./...

  lint:
    cmds:
      - task: gofmt
      - task: golint

  fmt:
    cmds:
      - task: gomod
      - task: gofmt
      - task: golint

  clean:
    desc: clean
    run: once
    cmds:
      - rm -rf web/build
      - rm -rf {{.BUILD_DIR}}

  run:
    desc: run
    deps:
      - build
    cmds:
      - "{{.BIN_DIR}}"

  build:
    desc: build binary
    deps:
      - gomod
      - web
    cmds:
      - go build -o {{.BIN_DIR}} -ldflags "{{.LDFLAGS}}"

  docker:
    desc: build docker image
    deps:
      - gomod
      - web
    cmds:
      - GOOS=linux GOARCH=amd64 go build -o {{.BIN_DIR}} -ldflags "{{.LDFLAGS}}"
      - docker buildx build --pull --push --platform linux/amd64 -t "{{.IMAGE}}" .

  default:
    cmds:
      - task: build
  
  sync-upstream:
    desc: "与上游同步，更新版本，提交并推送到 origin"
    cmds:
      - git fetch --all
      - git merge fork/main
      - export LATEST_TAG=$(git describe --tags --abbrev=0)
      - export NEW_VERSION=$(echo $LATEST_TAG | sed 's/^v//')
      - echo "正在更新版本文件到 $NEW_VERSION"
      - echo $NEW_VERSION > VERSION
      - git add VERSION
      - git commit -m "chore(version): Update version to $NEW_VERSION"
      - echo "版本更新提交完成，正在推送到 origin..."
      - git push origin main
      - echo "推送完成！"